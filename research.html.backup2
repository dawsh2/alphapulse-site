<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="theme-color" content="#0969da" id="theme-color">
    <title>Research - AlphaPulse</title>
    
    <!-- Shared styles with Full Stack Open design -->
    <link rel="stylesheet" href="shared.css">
    
    <!-- Prism for syntax highlighting -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    
    <!-- Marked for markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    
    <!-- Page-specific styles -->
    <style>
        /* Layout */
        .research-container {
            display: flex;
            height: calc(100vh - var(--header-height));
            overflow: hidden;
        }
        
        /* Snippets Sidebar */
        .snippets-sidebar {
            width: 320px;
            background: var(--color-bg-secondary);
            border-right: 1px solid var(--color-border-primary);
            display: flex;
            flex-direction: column;
            transition: all var(--transition-base);
            position: relative;
        }
        
        .sidebar-header {
            padding: var(--space-4);
            background: var(--color-bg-tertiary);
            border-bottom: 1px solid var(--color-border-primary);
            display: flex;
            flex-direction: column;
            gap: var(--space-3);
        }
        
        .sidebar-tabs {
            display: flex;
            gap: var(--space-1);
        }
        
        .sidebar-tab {
            flex: 1;
            padding: var(--space-2) var(--space-3);
            background: var(--color-bg-primary);
            border: 1px solid var(--color-border-primary);
            border-radius: var(--radius-sm);
            font-size: var(--font-size-xs);
            font-weight: var(--font-weight-medium);
            text-align: center;
            cursor: pointer;
            transition: all var(--transition-fast);
            color: var(--color-text-secondary);
        }
        
        .sidebar-tab.active {
            background: var(--color-accent-primary);
            color: white;
            border-color: var(--color-accent-primary);
        }
        
        .sidebar-tab:hover:not(.active) {
            background: var(--color-bg-secondary);
        }
        
        .sidebar-title {
            font-weight: var(--font-weight-semibold);
            font-size: var(--font-size-sm);
            text-transform: uppercase;
            letter-spacing: var(--letter-spacing-wide);
            color: var(--color-text-secondary);
            margin-bottom: var(--space-3);
        }
        
        .snippet-search {
            width: 100%;
            padding: var(--space-2) var(--space-3);
            background: var(--color-bg-primary);
            border: 1px solid var(--color-border-primary);
            border-radius: var(--radius-md);
            font-size: var(--font-size-sm);
            color: var(--color-text-primary);
        }
        
        .snippet-search:focus {
            outline: none;
            border-color: var(--color-accent-primary);
            box-shadow: 0 0 0 3px var(--color-focus-ring);
        }
        
        .sidebar-content {
            flex: 1;
            overflow-y: auto;
            padding: var(--space-2) 0;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .snippet-category,
        .template-category {
            margin-bottom: var(--space-4);
        }
        
        .category-header {
            padding: var(--space-2) var(--space-4);
            font-size: var(--font-size-xs);
            font-weight: var(--font-weight-semibold);
            text-transform: uppercase;
            letter-spacing: var(--letter-spacing-wide);
            color: var(--color-text-tertiary);
            display: flex;
            align-items: center;
            gap: var(--space-2);
            cursor: pointer;
        }
        
        .category-arrow {
            font-size: 10px;
            transition: transform var(--transition-fast);
        }
        
        .category-header.collapsed .category-arrow {
            transform: rotate(-90deg);
        }
        
        .category-header.collapsed + .snippet-list,
        .category-header.collapsed + .template-list,
        .category-header.collapsed + .notebook-list {
            display: none;
        }
        
        .snippet-list,
        .template-list {
            display: flex;
            flex-direction: column;
        }
        
        .snippet-item,
        .template-item {
            padding: var(--space-3) var(--space-4);
            cursor: pointer;
            transition: all var(--transition-fast);
            border-left: 3px solid transparent;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .snippet-item:hover,
        .template-item:hover {
            background: var(--color-bg-tertiary);
            border-left-color: var(--color-accent-primary);
        }
        
        .template-item {
            flex-direction: column;
            align-items: flex-start;
            gap: var(--space-1);
        }
        
        .template-name {
            font-size: var(--font-size-sm);
            font-weight: var(--font-weight-medium);
            color: var(--color-text-primary);
        }
        
        .template-desc {
            font-size: var(--font-size-xs);
            color: var(--color-text-tertiary);
            line-height: var(--line-height-tight);
        }
        
        /* Notebook Browser */
        .notebook-browser {
            padding: var(--space-2) 0;
        }
        
        .browser-header {
            padding: 0 var(--space-4) var(--space-3) var(--space-4);
        }
        
        .notebook-category {
            margin-bottom: var(--space-4);
        }
        
        .notebook-list {
            display: flex;
            flex-direction: column;
        }
        
        .notebook-item {
            padding: var(--space-3) var(--space-4);
            cursor: pointer;
            transition: all var(--transition-fast);
            border-left: 3px solid transparent;
            display: flex;
            flex-direction: column;
            gap: var(--space-1);
        }
        
        .notebook-item:hover {
            background: var(--color-bg-tertiary);
            border-left-color: var(--color-accent-primary);
        }
        
        .notebook-item.shared {
            border-left-color: var(--color-success-emphasis);
        }
        
        .notebook-name {
            font-size: var(--font-size-sm);
            font-weight: var(--font-weight-medium);
            color: var(--color-text-primary);
        }
        
        .notebook-meta {
            font-size: var(--font-size-xs);
            color: var(--color-text-tertiary);
        }
        
        .strategy-folder {
            padding: var(--space-2) var(--space-4);
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: var(--space-2);
            transition: all var(--transition-fast);
        }
        
        .strategy-folder:hover {
            background: var(--color-bg-tertiary);
        }
        
        .folder-icon {
            font-size: var(--font-size-sm);
        }
        
        .notebook-count {
            margin-left: auto;
            font-size: var(--font-size-xs);
            color: var(--color-text-tertiary);
            background: var(--color-bg-primary);
            padding: 2px 6px;
            border-radius: var(--radius-sm);
        }
        
        .snippet-name {
            font-size: var(--font-size-sm);
            color: var(--color-text-primary);
        }
        
        .snippet-shortcut {
            font-family: var(--font-family-mono);
            font-size: var(--font-size-xs);
            color: var(--color-text-tertiary);
            background: var(--color-bg-primary);
            padding: 2px 6px;
            border-radius: var(--radius-sm);
        }
        
        /* Notebook Container */
        .notebook-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: var(--color-bg-primary);
            overflow: hidden;
        }
        
        .notebook-header {
            background: var(--color-bg-secondary);
            border-bottom: 1px solid var(--color-border-primary);
            padding: var(--space-3) var(--space-4);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .notebook-title-input {
            font-size: var(--font-size-lg);
            font-weight: var(--font-weight-semibold);
            color: var(--color-text-primary);
            background: transparent;
            border: 1px solid transparent;
            padding: var(--space-1) var(--space-2);
            border-radius: var(--radius-md);
            transition: all var(--transition-fast);
        }
        
        .notebook-title-input:hover {
            background: var(--color-bg-tertiary);
        }
        
        .notebook-title-input:focus {
            background: var(--color-bg-primary);
            border-color: var(--color-accent-primary);
            outline: none;
        }
        
        .notebook-actions {
            display: flex;
            gap: var(--space-2);
        }
        
        /* Notebook Content */
        .notebook-content {
            flex: 1;
            overflow-y: auto;
            padding: var(--space-6) var(--space-8) var(--space-6) var(--space-6);
            max-width: none;
            width: 100%;
        }
        
        /* Cells */
        .cell {
            margin-bottom: var(--space-4);
            border-radius: var(--radius-lg);
            border: 1px solid transparent;
            transition: all var(--transition-fast);
            position: relative;
        }
        
        .cell:hover {
            border-color: var(--color-border-primary);
        }
        
        .cell.active {
            border-color: var(--color-accent-primary);
            box-shadow: 0 0 0 1px var(--color-accent-primary);
        }
        
        .cell-toolbar {
            position: absolute;
            top: var(--space-2);
            right: var(--space-2);
            display: none;
            gap: var(--space-1);
        }
        
        .cell:hover .cell-toolbar,
        .cell.active .cell-toolbar {
            display: flex;
        }
        
        .cell-btn {
            padding: var(--space-1);
            font-size: var(--font-size-xs);
            background: var(--color-bg-secondary);
            border: 1px solid var(--color-border-primary);
            border-radius: var(--radius-sm);
            cursor: pointer;
            color: var(--color-text-secondary);
            transition: all var(--transition-fast);
        }
        
        .cell-btn:hover {
            background: var(--color-bg-tertiary);
            color: var(--color-text-primary);
        }
        
        /* Code Cell */
        .code-cell {
            background: var(--color-bg-code);
            border: 1px solid var(--color-border-primary);
        }
        
        .code-input {
            padding: var(--space-4);
            position: relative;
        }
        
        .code-editor {
            position: relative;
            font-family: var(--font-family-mono);
            font-size: var(--font-size-sm);
            line-height: var(--line-height-relaxed);
        }
        
        .code-textarea {
            width: 100%;
            min-height: 80px;
            padding: 0;
            margin: 0;
            background: transparent;
            color: var(--color-text-primary);
            border: none;
            outline: none;
            resize: vertical;
            font-family: inherit;
            font-size: inherit;
            line-height: inherit;
            white-space: pre;
            overflow: auto;
        }
        
        /* Compact Monaco for notebooks */
        .monaco-cell-editor {
            width: 100%;
            height: auto;
            min-height: 60px;
            border-radius: var(--radius-md);
            overflow: hidden;
        }
        
        /* Hide Monaco decorations for cleaner look */
        .monaco-cell-editor .monaco-editor {
            background: transparent !important;
        }
        
        .monaco-cell-editor .monaco-editor .margin {
            background: transparent !important;
        }
        
        .monaco-cell-editor .monaco-scrollable-element > .scrollbar {
            display: none !important;
        }
        
        .monaco-cell-editor .monaco-editor .scroll-decoration {
            display: none !important;
        }
        
        /* Autocomplete Popup */
        .autocomplete-popup {
            position: absolute;
            background: var(--color-bg-primary);
            border: 1px solid var(--color-border-primary);
            border-radius: var(--radius-md);
            box-shadow: var(--shadow-lg);
            max-height: 300px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }
        
        .autocomplete-popup.show {
            display: block;
        }
        
        .autocomplete-item {
            padding: var(--space-2) var(--space-3);
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: var(--font-size-sm);
        }
        
        .autocomplete-item:hover,
        .autocomplete-item.selected {
            background: var(--color-bg-secondary);
        }
        
        .autocomplete-name {
            font-family: var(--font-family-mono);
            color: var(--color-text-primary);
        }
        
        .autocomplete-type {
            font-size: var(--font-size-xs);
            color: var(--color-text-tertiary);
            background: var(--color-bg-tertiary);
            padding: 2px 6px;
            border-radius: var(--radius-sm);
        }
        
        .code-output {
            background: var(--color-bg-primary);
            border-top: 1px solid var(--color-border-primary);
            padding: var(--space-3) var(--space-4);
            font-family: var(--font-family-mono);
            font-size: var(--font-size-sm);
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
        }
        
        .output-plot {
            padding: var(--space-4);
            background: white;
            border-radius: var(--radius-md);
            margin: var(--space-3) 0;
        }
        
        /* Markdown Cell */
        .markdown-cell {
            padding: var(--space-4);
        }
        
        .markdown-preview h1 {
            font-size: var(--font-size-2xl);
            margin-bottom: var(--space-4);
        }
        
        .markdown-preview h2 {
            font-size: var(--font-size-xl);
            margin-top: var(--space-6);
            margin-bottom: var(--space-3);
        }
        
        .markdown-preview p {
            margin-bottom: var(--space-3);
            line-height: var(--line-height-relaxed);
        }
        
        .markdown-preview code {
            background: var(--color-bg-code);
            padding: 2px 6px;
            border-radius: var(--radius-sm);
            font-size: 0.9em;
        }
        
        /* Add Cell Button */
        .add-cell {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: var(--space-3);
            padding: var(--space-3);
            margin: var(--space-4) 0;
            border: 2px dashed var(--color-border-primary);
            border-radius: var(--radius-lg);
            background: var(--color-bg-secondary);
            cursor: pointer;
            transition: all var(--transition-fast);
        }
        
        .add-cell:hover {
            border-color: var(--color-accent-primary);
            background: var(--color-bg-tertiary);
        }
        
        /* Mobile Styles */
        @media (max-width: 768px) {
            .research-container {
                height: calc(100vh - var(--mobile-header-height));
            }
            
            .snippets-sidebar {
                position: fixed;
                left: 0;
                top: var(--mobile-header-height);
                height: calc(100vh - var(--mobile-header-height));
                z-index: 200;
                transform: translateX(-100%);
                width: 85vw;
                max-width: 320px;
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.5);
            }
            
            .snippets-sidebar.open {
                transform: translateX(0);
            }
            
            .sidebar-tabs {
                flex-wrap: wrap;
                gap: var(--space-1);
            }
            
            .sidebar-tab {
                font-size: var(--font-size-xs);
                padding: var(--space-1) var(--space-2);
                flex: 1;
                min-width: 0;
            }
            
            .notebook-content {
                padding: var(--space-4) var(--space-6);
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Header will be injected by layout.js -->
        
        <div class="research-container">
            <!-- Snippets Sidebar -->
            <aside class="snippets-sidebar" id="snippetsSidebar">
                <div class="sidebar-header">
                    <div class="sidebar-tabs">
                        <button class="sidebar-tab active" onclick="switchTab('snippets', this)">Snippets</button>
                        <button class="sidebar-tab" onclick="switchTab('templates', this)">Templates</button>
                        <button class="sidebar-tab" onclick="switchTab('notebooks', this)">Notebooks</button>
                    </div>
                    <input type="text" class="snippet-search" placeholder="Search..." onkeyup="filterContent(event)">
                </div>
                
                <div class="sidebar-content">
                    <!-- Snippets Tab Content -->
                    <div class="tab-content active" id="snippetsTab">
                    <!-- Data Loading -->
                    <div class="snippet-category">
                        <div class="category-header collapsed" onclick="toggleCategory(this)">
                            <span class="category-arrow">▼</span>
                            <span>Data Loading</span>
                        </div>
                        <div class="snippet-list">
                            <div class="snippet-item" onclick="insertSnippet('load_strategy')">
                                <span class="snippet-name">Load Strategy Signals</span>
                                <span class="snippet-shortcut">load</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('load_execution')">
                                <span class="snippet-name">Load Execution Trace</span>
                                <span class="snippet-shortcut">exec</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('query_registry')">
                                <span class="snippet-name">Query Registry</span>
                                <span class="snippet-shortcut">qry</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Performance Metrics -->
                    <div class="snippet-category">
                        <div class="category-header collapsed" onclick="toggleCategory(this)">
                            <span class="category-arrow">▼</span>
                            <span>Performance Metrics</span>
                        </div>
                        <div class="snippet-list">
                            <div class="snippet-item" onclick="insertSnippet('sharpe_ratio')">
                                <span class="snippet-name">Calculate Sharpe Ratio</span>
                                <span class="snippet-shortcut">sharpe</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('max_drawdown')">
                                <span class="snippet-name">Maximum Drawdown</span>
                                <span class="snippet-shortcut">mdd</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('win_rate')">
                                <span class="snippet-name">Win/Loss Analysis</span>
                                <span class="snippet-shortcut">winrate</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('performance_table')">
                                <span class="snippet-name">Performance Summary Table</span>
                                <span class="snippet-shortcut">perftable</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Visualizations -->
                    <div class="snippet-category">
                        <div class="category-header collapsed" onclick="toggleCategory(this)">
                            <span class="category-arrow">▼</span>
                            <span>Visualizations</span>
                        </div>
                        <div class="snippet-list">
                            <div class="snippet-item" onclick="insertSnippet('equity_curve')">
                                <span class="snippet-name">Plot Equity Curve</span>
                                <span class="snippet-shortcut">equity</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('drawdown_plot')">
                                <span class="snippet-name">Drawdown Chart</span>
                                <span class="snippet-shortcut">ddplot</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('heatmap')">
                                <span class="snippet-name">Parameter Heatmap</span>
                                <span class="snippet-shortcut">hmap</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('trade_scatter')">
                                <span class="snippet-name">Trade Distribution</span>
                                <span class="snippet-shortcut">trades</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Strategy Comparison -->
                    <div class="snippet-category">
                        <div class="category-header collapsed" onclick="toggleCategory(this)">
                            <span class="category-arrow">▼</span>
                            <span>Comparisons</span>
                        </div>
                        <div class="snippet-list">
                            <div class="snippet-item" onclick="insertSnippet('compare_strategies')">
                                <span class="snippet-name">Compare Strategies</span>
                                <span class="snippet-shortcut">compare</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('correlation_matrix')">
                                <span class="snippet-name">Correlation Matrix</span>
                                <span class="snippet-shortcut">corr</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('regime_analysis')">
                                <span class="snippet-name">Regime Analysis</span>
                                <span class="snippet-shortcut">regime</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Advanced Analysis -->
                    <div class="snippet-category">
                        <div class="category-header collapsed" onclick="toggleCategory(this)">
                            <span class="category-arrow">▼</span>
                            <span>Advanced</span>
                        </div>
                        <div class="snippet-list">
                            <div class="snippet-item" onclick="insertSnippet('factor_attribution')">
                                <span class="snippet-name">Factor Attribution</span>
                                <span class="snippet-shortcut">factor</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('portfolio_optimization')">
                                <span class="snippet-name">Portfolio Optimization</span>
                                <span class="snippet-shortcut">optim</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('parameter_sweep')">
                                <span class="snippet-name">Parameter Sweep Analysis</span>
                                <span class="snippet-shortcut">sweep</span>
                            </div>
                            <div class="snippet-item" onclick="insertSnippet('config_to_notebook')">
                                <span class="snippet-name">Generate from Config</span>
                                <span class="snippet-shortcut">config</span>
                            </div>
                        </div>
                    </div>
                    </div>
                    
                    <!-- Templates Tab Content -->
                    <div class="tab-content" id="templatesTab">
                        <div class="template-category">
                            <div class="category-header collapsed" onclick="toggleCategory(this)">
                                <span class="category-arrow">▼</span>
                                <span>Quick Analysis</span>
                            </div>
                            <div class="template-list">
                                <div class="template-item" onclick="loadTemplate('strategy_comparison')">
                                    <div class="template-name">Strategy Comparison</div>
                                    <div class="template-desc">Compare multiple strategies head-to-head</div>
                                </div>
                                <div class="template-item" onclick="loadTemplate('performance_summary')">
                                    <div class="template-name">Performance Summary</div>
                                    <div class="template-desc">Complete performance analysis</div>
                                </div>
                                <div class="template-item" onclick="loadTemplate('parameter_sweep')">
                                    <div class="template-name">Parameter Sweep Analysis</div>
                                    <div class="template-desc">Analyze optimization results</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="template-category">
                            <div class="category-header collapsed" onclick="toggleCategory(this)">
                                <span class="category-arrow">▼</span>
                                <span>Advanced Research</span>
                            </div>
                            <div class="template-list">
                                <div class="template-item" onclick="loadTemplate('regime_analysis')">
                                    <div class="template-name">Market Regime Analysis</div>
                                    <div class="template-desc">Performance across market conditions</div>
                                </div>
                                <div class="template-item" onclick="loadTemplate('factor_attribution')">
                                    <div class="template-name">Factor Attribution</div>
                                    <div class="template-desc">Risk factor decomposition</div>
                                </div>
                                <div class="template-item" onclick="loadTemplate('portfolio_construction')">
                                    <div class="template-name">Portfolio Construction</div>
                                    <div class="template-desc">Build optimal strategy portfolios</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="template-category">
                            <div class="category-header collapsed" onclick="toggleCategory(this)">
                                <span class="category-arrow">▼</span>
                                <span>Production Ready</span>
                            </div>
                            <div class="template-list">
                                <div class="template-item" onclick="loadTemplate('production_validation')">
                                    <div class="template-name">Production Validation</div>
                                    <div class="template-desc">Pre-deployment checks and validation</div>
                                </div>
                                <div class="template-item" onclick="loadTemplate('live_monitoring')">
                                    <div class="template-name">Live Monitoring Setup</div>
                                    <div class="template-desc">Real-time performance tracking</div>
                                </div>
                                <div class="template-item" onclick="loadTemplate('config_analysis')">
                                    <div class="template-name">Config Analysis Notebook</div>
                                    <div class="template-desc">Generate analysis from ADMF config file</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Notebooks Tab Content -->
                    <div class="tab-content" id="notebooksTab">
                        <div class="notebook-browser">
                            <div class="browser-header">
                                <button class="btn btn-sm btn-primary" onclick="createNewNotebook()" style="width: 100%; margin-bottom: var(--space-2);">
                                    + New Notebook
                                </button>
                                <button class="btn btn-sm btn-secondary" onclick="generateFromConfig()" style="width: 100%; margin-bottom: var(--space-3);">
                                    📄 Generate from Config
                                </button>
                            </div>
                            
                            <div id="notebooksList">
                                <!-- NT Tutorial notebooks will be loaded here -->
                            </div>
                            
                            <div class="notebook-category">
                                <div class="category-header" onclick="toggleCategory(this)">
                                    <span class="category-arrow">▼</span>
                                    <span>Recent Notebooks</span>
                                </div>
                                <div class="notebook-list">
                                    <div class="notebook-item" onclick="loadNotebook('momentum_analysis_jan24')">
                                        <div class="notebook-name">Momentum Analysis Jan 2024</div>
                                        <div class="notebook-meta">Modified 2 hours ago</div>
                                    </div>
                                    <div class="notebook-item" onclick="loadNotebook('parameter_sweep_bb')">
                                        <div class="notebook-name">Bollinger Bands Parameter Sweep</div>
                                        <div class="notebook-meta">Modified yesterday</div>
                                    </div>
                                    <div class="notebook-item" onclick="loadNotebook('strategy_comparison_q4')">
                                        <div class="notebook-name">Q4 Strategy Comparison</div>
                                        <div class="notebook-meta">Modified 3 days ago</div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="notebook-category">
                                <div class="category-header collapsed" onclick="toggleCategory(this)">
                                    <span class="category-arrow">▼</span>
                                    <span>By Strategy Type</span>
                                </div>
                                <div class="notebook-list">
                                    <div class="strategy-folder" onclick="toggleFolder(this)">
                                        <span class="folder-icon">📁</span>
                                        <span>Momentum Strategies</span>
                                        <span class="notebook-count">(5)</span>
                                    </div>
                                    <div class="strategy-folder" onclick="toggleFolder(this)">
                                        <span class="folder-icon">📁</span>
                                        <span>Mean Reversion</span>
                                        <span class="notebook-count">(3)</span>
                                    </div>
                                    <div class="strategy-folder" onclick="toggleFolder(this)">
                                        <span class="folder-icon">📁</span>
                                        <span>Ensemble Models</span>
                                        <span class="notebook-count">(2)</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="notebook-category">
                                <div class="category-header collapsed" onclick="toggleCategory(this)">
                                    <span class="category-arrow">▼</span>
                                    <span>Shared Notebooks</span>
                                </div>
                                <div class="notebook-list">
                                    <div class="notebook-item shared" onclick="loadNotebook('team_analysis')">
                                        <div class="notebook-name">Team Analysis Template</div>
                                        <div class="notebook-meta">Shared • Read-only</div>
                                    </div>
                                    <div class="notebook-item shared" onclick="loadNotebook('production_checklist')">
                                        <div class="notebook-name">Production Checklist</div>
                                        <div class="notebook-meta">Shared • Can edit</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </aside>
            
            <!-- Notebook Container -->
            <div class="notebook-container">
                <div class="notebook-header">
                    <input type="text" class="notebook-title-input" value="Strategy Analysis - Jan 2024" />
                    <div class="notebook-actions">
                        <button class="btn btn-ghost btn-sm" onclick="runAllCells()">Run All</button>
                        <button class="btn btn-ghost btn-sm" onclick="clearOutputs()">Clear</button>
                        <button class="btn btn-ghost btn-sm" onclick="exportNotebook()">Export</button>
                        <button class="btn btn-primary btn-sm" onclick="saveNotebook()">Save</button>
                    </div>
                </div>
                
                <div class="notebook-content" id="notebookContent">
                    <!-- Markdown Cell -->
                    <div class="cell markdown-cell">
                        <div class="cell-toolbar">
                            <button class="cell-btn" onclick="runCell(this)">▶</button>
                            <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                        </div>
                        <div class="markdown-preview">
                            <h1>Strategy Analysis</h1>
                            <p>Analyzing momentum strategies from the latest config run. The backend automatically generated signals for any missing parameter combinations.</p>
                        </div>
                    </div>
                    
                    <!-- Code Cell 1: Load Data -->
                    <div class="cell code-cell active" id="cell-1">
                        <div class="cell-toolbar">
                            <button class="cell-btn" onclick="runCell(this)">▶</button>
                            <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                        </div>
                        <div class="code-input">
                            <div class="code-editor">
                                <textarea class="code-textarea" onkeydown="handleKeyDown(event, this)" oninput="handleInput(event, this)">import admf
from analysis_lib import *

# Load strategy signals from latest run
signals = admf.load_signals('momentum', min_sharpe=1.5)
print(f"Loaded {len(signals)} strategy variations")</textarea>
                            </div>
                            <div class="autocomplete-popup" id="autocomplete-1"></div>
                        </div>
                        <div class="code-output">Loaded 23 strategy variations
<span style="color: var(--color-success-emphasis);">✓ Signals loaded from registry.db</span>
<span style="color: var(--color-text-secondary);">Found parameter combinations: momentum(period=[10,15,20,25,30], threshold=[1.2,1.5,1.8,2.0,2.2])</span></div>
                    </div>
                    
                    <!-- Code Cell 2: Performance Metrics -->
                    <div class="cell code-cell" id="cell-2">
                        <div class="cell-toolbar">
                            <button class="cell-btn" onclick="runCell(this)">▶</button>
                            <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                        </div>
                        <div class="code-input">
                            <div class="code-editor">
                                <textarea class="code-textarea" onkeydown="handleKeyDown(event, this)" oninput="handleInput(event, this)">
# Calculate performance metrics for each strategy
metrics = performance_table(signals)
metrics.head(10)</textarea>
                            </div>
                            <div class="autocomplete-popup" id="autocomplete-2"></div>
                        </div>
                        <div class="code-output">
                            <div class="output-table">
                                <table style="width: 100%; border-collapse: collapse; font-family: var(--font-family-mono); font-size: var(--font-size-sm);">
                                    <thead>
                                        <tr style="background: var(--color-bg-tertiary); border-bottom: 1px solid var(--color-border-primary);">
                                            <th style="padding: var(--space-2); text-align: left;">Strategy</th>
                                            <th style="padding: var(--space-2); text-align: right;">Sharpe</th>
                                            <th style="padding: var(--space-2); text-align: right;">Max DD</th>
                                            <th style="padding: var(--space-2); text-align: right;">Win Rate</th>
                                            <th style="padding: var(--space-2); text-align: right;">Total Return</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr><td style="padding: var(--space-2);">momentum_15_1.5</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">2.34</td><td style="padding: var(--space-2); text-align: right;">-8.2%</td><td style="padding: var(--space-2); text-align: right;">68%</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">+34.5%</td></tr>
                                        <tr style="background: var(--color-bg-secondary);"><td style="padding: var(--space-2);">momentum_20_1.8</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">2.12</td><td style="padding: var(--space-2); text-align: right;">-9.4%</td><td style="padding: var(--space-2); text-align: right;">64%</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">+28.3%</td></tr>
                                        <tr><td style="padding: var(--space-2);">momentum_10_2.0</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">1.87</td><td style="padding: var(--space-2); text-align: right;">-11.2%</td><td style="padding: var(--space-2); text-align: right;">59%</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">+22.1%</td></tr>
                                        <tr style="background: var(--color-bg-secondary);"><td style="padding: var(--space-2);">momentum_25_1.2</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">1.65</td><td style="padding: var(--space-2); text-align: right;">-6.8%</td><td style="padding: var(--space-2); text-align: right;">71%</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">+19.7%</td></tr>
                                        <tr><td style="padding: var(--space-2);">momentum_30_2.2</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">1.43</td><td style="padding: var(--space-2); text-align: right;">-13.5%</td><td style="padding: var(--space-2); text-align: right;">55%</td><td style="padding: var(--space-2); text-align: right; color: var(--color-success-emphasis);">+16.8%</td></tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Code Cell 3: Equity Curve Visualization -->
                    <div class="cell code-cell" id="cell-3">
                        <div class="cell-toolbar">
                            <button class="cell-btn" onclick="runCell(this)">▶</button>
                            <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                        </div>
                        <div class="code-input">
                            <div class="code-editor">
                                <textarea class="code-textarea" onkeydown="handleKeyDown(event, this)" oninput="handleInput(event, this)">
# Plot equity curves for top strategies
top_strategies = signals.nlargest(3, 'sharpe_ratio')
fig = plot_equity_curves(top_strategies, benchmark='SPY')
fig.show()</textarea>
                            </div>
                            <div class="autocomplete-popup" id="autocomplete-3"></div>
                        </div>
                        <div class="code-output">
                            <div class="output-plot">
                                <div style="background: white; border-radius: var(--radius-md); padding: var(--space-4); margin: var(--space-3) 0;">
                                    <div style="text-align: center; font-weight: var(--font-weight-semibold); margin-bottom: var(--space-3); color: #333;">Strategy Performance vs SPY Benchmark</div>
                                    <svg width="100%" height="300" viewBox="0 0 600 300" style="border: 1px solid #eee;">
                                        <!-- Grid lines -->
                                        <defs>
                                            <pattern id="grid" width="60" height="30" patternUnits="userSpaceOnUse">
                                                <path d="M 60 0 L 0 0 0 30" fill="none" stroke="#f0f0f0" stroke-width="1"/>
                                            </pattern>
                                        </defs>
                                        <rect width="100%" height="100%" fill="url(#grid)" />
                                        
                                        <!-- Benchmark (SPY) -->
                                        <polyline fill="none" stroke="#6b7280" stroke-width="2" stroke-dasharray="5,5"
                                                  points="50,250 110,235 170,240 230,225 290,215 350,205 410,195 470,185 530,175" />
                                        
                                        <!-- Strategy 1 (Best) -->
                                        <polyline fill="none" stroke="#10b981" stroke-width="3"
                                                  points="50,250 110,230 170,210 230,190 290,170 350,150 410,130 470,110 530,90" />
                                        
                                        <!-- Strategy 2 -->
                                        <polyline fill="none" stroke="#3b82f6" stroke-width="2.5"
                                                  points="50,250 110,235 170,220 230,205 290,185 350,165 410,145 470,125 530,105" />
                                        
                                        <!-- Strategy 3 -->
                                        <polyline fill="none" stroke="#8b5cf6" stroke-width="2"
                                                  points="50,250 110,240 170,230 230,215 290,195 350,175 410,155 470,135 530,115" />
                                        
                                        <!-- Axes -->
                                        <line x1="50" y1="250" x2="530" y2="250" stroke="#374151" stroke-width="1"/>
                                        <line x1="50" y1="50" x2="50" y2="250" stroke="#374151" stroke-width="1"/>
                                        
                                        <!-- Y-axis labels -->
                                        <text x="45" y="55" text-anchor="end" font-size="12" fill="#6b7280">50%</text>
                                        <text x="45" y="105" text-anchor="end" font-size="12" fill="#6b7280">40%</text>
                                        <text x="45" y="155" text-anchor="end" font-size="12" fill="#6b7280">30%</text>
                                        <text x="45" y="205" text-anchor="end" font-size="12" fill="#6b7280">20%</text>
                                        <text x="45" y="255" text-anchor="end" font-size="12" fill="#6b7280">0%</text>
                                        
                                        <!-- X-axis labels -->
                                        <text x="50" y="270" text-anchor="middle" font-size="12" fill="#6b7280">Jan</text>
                                        <text x="170" y="270" text-anchor="middle" font-size="12" fill="#6b7280">Apr</text>
                                        <text x="290" y="270" text-anchor="middle" font-size="12" fill="#6b7280">Jul</text>
                                        <text x="410" y="270" text-anchor="middle" font-size="12" fill="#6b7280">Oct</text>
                                        <text x="530" y="270" text-anchor="middle" font-size="12" fill="#6b7280">Dec</text>
                                    </svg>
                                    <div style="display: flex; justify-content: center; gap: var(--space-4); margin-top: var(--space-3); font-size: var(--font-size-sm);">
                                        <div style="display: flex; align-items: center; gap: var(--space-1);"><div style="width: 20px; height: 3px; background: #10b981;"></div>momentum_15_1.5 (34.5%)</div>
                                        <div style="display: flex; align-items: center; gap: var(--space-1);"><div style="width: 20px; height: 2.5px; background: #3b82f6;"></div>momentum_20_1.8 (28.3%)</div>
                                        <div style="display: flex; align-items: center; gap: var(--space-1);"><div style="width: 20px; height: 2px; background: #8b5cf6;"></div>momentum_10_2.0 (22.1%)</div>
                                        <div style="display: flex; align-items: center; gap: var(--space-1);"><div style="width: 20px; height: 2px; background: #6b7280; border-style: dashed;"></div>SPY Benchmark (15.2%)</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Add Cell Button -->
                    <div class="add-cell" onclick="addCell()">
                        <span>+ Add Cell</span>
                        <select id="cellTypeSelect" class="form-input" style="width: auto; padding: var(--space-1) var(--space-2); font-size: var(--font-size-sm);">
                            <option value="code">Code</option>
                            <option value="markdown">Markdown</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Layout Manager -->
    <script src="layout.js"></script>
    
    <!-- Monaco Editor for code cells -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs/loader.min.js"></script>
    
    <!-- Marked.js for Markdown -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    
    <script>
        // Snippet definitions
        const snippets = {
            load_strategy: `# Load strategy signals from registry
signals = admf.load_signals(
    strategy_type='momentum',
    min_sharpe=1.0,
    date_range='2024-01-01:'
)
print(f"Loaded {len(signals)} strategies")`,
            
            load_execution: `# Load execution trace
executions = admf.load_executions(
    signal_hash='sig_a7f8d9e6',
    include_fills=True
)`,
            
            query_registry: `# Query the registry for untested parameters
untested = admf.query("""
    SELECT DISTINCT period, std_dev 
    FROM parameter_grid 
    WHERE NOT EXISTS (
        SELECT 1 FROM signals 
        WHERE signals.parameters = parameter_grid.parameters
    )
""")`,
            
            sharpe_ratio: `# Calculate Sharpe ratio
sharpe = calculate_sharpe_ratio(returns, risk_free_rate=0.02)
print(f"Sharpe Ratio: {sharpe:.2f}")`,
            
            max_drawdown: `# Calculate maximum drawdown
mdd, mdd_duration = calculate_max_drawdown(equity_curve)
print(f"Max Drawdown: {mdd:.1%}")
print(f"Duration: {mdd_duration} days")`,
            
            win_rate: `# Win/Loss analysis
trades = extract_trades(signals, executions)
win_rate = (trades['pnl'] > 0).mean()
avg_win = trades[trades['pnl'] > 0]['pnl'].mean()
avg_loss = trades[trades['pnl'] < 0]['pnl'].mean()

print(f"Win Rate: {win_rate:.1%}")
print(f"Avg Win: \${avg_win:.2f}")
print(f"Avg Loss: \${avg_loss:.2f}")
print(f"Win/Loss Ratio: {abs(avg_win/avg_loss):.2f}")`,
            
            performance_table: `# Generate performance summary table
metrics = performance_table(signals)
metrics.style.format({
    'sharpe': '{:.2f}',
    'max_dd': '{:.1%}',
    'win_rate': '{:.1%}',
    'total_return': '{:+.1%}'
}).background_gradient(cmap='RdYlGn', subset=['sharpe', 'total_return'])`,
            
            equity_curve: `# Plot equity curves
fig = plot_equity_curves(
    signals, 
    benchmark='SPY',
    title='Strategy Performance Comparison'
)
fig.show()`,
            
            drawdown_plot: `# Plot drawdown analysis
fig = plot_drawdown_analysis(
    equity_curve,
    title='Underwater Plot',
    show_recovery_time=True
)
fig.show()`,
            
            heatmap: `# Parameter sensitivity heatmap
fig = parameter_heatmap(
    signals,
    x_param='period',
    y_param='std_dev',
    metric='sharpe_ratio',
    title='Parameter Sensitivity Analysis'
)
fig.show()`,
            
            compare_strategies: `# Compare multiple strategies
comparison = compare_strategies(
    ['sig_a7f8d9e6', 'sig_b8g9e0f7', 'sig_c9h0f1g8'],
    metrics=['sharpe', 'max_dd', 'win_rate', 'total_return']
)
comparison.plot(kind='bar', figsize=(10, 6))`,
            
            correlation_matrix: `# Strategy correlation analysis
corr_matrix = calculate_correlation_matrix(signals)
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Strategy Return Correlations')`,
            
            regime_analysis: `# Analyze performance by market regime
regimes = classify_market_regimes(market_data)
regime_perf = performance_by_regime(signals, regimes)

regime_perf.plot(kind='bar', stacked=True)
plt.title('Performance by Market Regime')
plt.ylabel('Average Daily Return (%)')`,
            
            parameter_sweep: `# Analyze parameter sweep results
sweep_results = analyze_parameter_sweep(
    signals,
    parameters=['period', 'std_dev'],
    metric='sharpe_ratio'
)

# Find optimal parameters
optimal = sweep_results.idxmax()
print(f"Optimal parameters: {optimal}")
print(f"Best Sharpe: {sweep_results.max():.2f}")`,
            
            config_to_notebook: `# Generate notebook from ADMF config file
config_path = input("Enter config file path: ")
notebook = admf.generate_notebook_from_config(
    config_path=config_path,
    include_execution=True,
    auto_run_analysis=True
)
print(f"Generated notebook: {notebook.title}")
print(f"Cells created: {len(notebook.cells)}")`
        };
        
        // Autocomplete suggestions
        const autocompleteSuggestions = [
            { name: 'admf.load_signals', type: 'function' },
            { name: 'admf.load_executions', type: 'function' },
            { name: 'admf.query', type: 'function' },
            { name: 'performance_table', type: 'function' },
            { name: 'calculate_sharpe_ratio', type: 'function' },
            { name: 'calculate_max_drawdown', type: 'function' },
            { name: 'plot_equity_curves', type: 'function' },
            { name: 'plot_drawdown_analysis', type: 'function' },
            { name: 'parameter_heatmap', type: 'function' },
            { name: 'compare_strategies', type: 'function' },
            { name: 'signals', type: 'variable' },
            { name: 'executions', type: 'variable' },
            { name: 'metrics', type: 'variable' }
        ];
        
        let activeCell = null;
        let cellCounter = 5;
        let monacoEditors = new Map();
        let monacoLoaded = false;
        
        // Notebook templates
        const notebookTemplates = {
            strategy_comparison: {
                title: 'Strategy Comparison Analysis',
                cells: [
                    {
                        type: 'markdown',
                        content: '# Strategy Comparison Analysis\n\nComparing multiple strategies across key performance metrics and risk characteristics.'
                    },
                    {
                        type: 'code',
                        content: `import admf\nfrom analysis_lib import *\n\n# Load strategies to compare\nstrategies = admf.load_signals(['momentum', 'mean_reversion'], min_sharpe=1.0)\nprint(f"Loaded {len(strategies)} strategies for comparison")`
                    },
                    {
                        type: 'code',
                        content: `# Performance comparison table\ncomparison = compare_strategies(\n    strategies,\n    metrics=['sharpe', 'max_dd', 'win_rate', 'total_return', 'calmar']\n)\ncomparison`
                    },
                    {
                        type: 'code',
                        content: `# Equity curves comparison\nfig = plot_equity_curves(\n    strategies,\n    benchmark='SPY',\n    title='Strategy Performance Comparison'\n)\nfig.show()`
                    }
                ]
            },
            
            performance_summary: {
                title: 'Complete Performance Analysis',
                cells: [
                    {
                        type: 'markdown',
                        content: '# Performance Summary Report\n\nComprehensive analysis of strategy performance including returns, risk metrics, and trade statistics.'
                    },
                    {
                        type: 'code',
                        content: `import admf\nfrom analysis_lib import *\n\n# Load strategy data\nsignals = admf.load_signals(strategy_hash='sig_a7f8d9e6')\nexecutions = admf.load_executions(signal_hash='sig_a7f8d9e6')\nprint(f"Analysis period: {signals.index.min()} to {signals.index.max()}")`
                    },
                    {
                        type: 'code',
                        content: `# Core performance metrics\nmetrics = calculate_performance_metrics(signals, executions)\nmetrics_df = pd.DataFrame([metrics])\nmetrics_df.T.round(3)`
                    },
                    {
                        type: 'code',
                        content: `# Trade analysis\ntrades = extract_trades(signals, executions)\ntrade_stats = analyze_trades(trades)\nprint(f"Total trades: {len(trades)}")\nprint(f"Win rate: {trade_stats['win_rate']:.1%}")\nprint(f"Profit factor: {trade_stats['profit_factor']:.2f}")`
                    },
                    {
                        type: 'code',
                        content: `# Visualizations\nfig = create_performance_dashboard(signals, executions, trades)\nfig.show()`
                    }
                ]
            },
            
            parameter_sweep: {
                title: 'Parameter Sweep Analysis',
                cells: [
                    {
                        type: 'markdown',
                        content: '# Parameter Optimization Analysis\n\nAnalyzing the results of parameter sweeps to identify optimal configurations and understand parameter sensitivity.'
                    },
                    {
                        type: 'code',
                        content: `import admf\nfrom analysis_lib import *\n\n# Load sweep results\nsweep_results = admf.load_signals(strategy_type='bollinger_bands')\nprint(f"Loaded {len(sweep_results)} parameter combinations")`
                    },
                    {
                        type: 'code',
                        content: `# Parameter sensitivity heatmap\nfig = parameter_heatmap(\n    sweep_results,\n    x_param='period',\n    y_param='std_dev',\n    metric='sharpe_ratio',\n    title='Sharpe Ratio Parameter Sensitivity'\n)\nfig.show()`
                    },
                    {
                        type: 'code',
                        content: `# Find optimal parameters\noptimal = sweep_results.loc[sweep_results['sharpe_ratio'].idxmax()]\nprint(f"Best Sharpe: {optimal['sharpe_ratio']:.2f}")\nprint(f"Optimal parameters: period={optimal['period']}, std_dev={optimal['std_dev']}")`
                    },
                    {
                        type: 'code',
                        content: `# Stability analysis\nstability = analyze_parameter_stability(sweep_results)\nplot_stability_analysis(stability)`
                    }
                ]
            },
            
            regime_analysis: {
                title: 'Market Regime Analysis',
                cells: [
                    {
                        type: 'markdown',
                        content: '# Market Regime Performance Analysis\n\nAnalyzing strategy performance across different market conditions and regimes.'
                    },
                    {
                        type: 'code',
                        content: `import admf\nfrom analysis_lib import *\n\n# Load data and classify regimes\nstrategies = admf.load_signals(min_sharpe=1.0)\nmarket_data = admf.load_market_data('SPY')\nregimes = classify_market_regimes(market_data, method='volatility_trend')\nprint(f"Identified {len(regimes.unique())} market regimes")`
                    },
                    {
                        type: 'code',
                        content: `# Performance by regime\nregime_perf = performance_by_regime(strategies, regimes)\nregime_perf.plot(kind='bar', figsize=(12, 6))\nplt.title('Strategy Performance by Market Regime')\nplt.ylabel('Sharpe Ratio')`
                    },
                    {
                        type: 'code',
                        content: `# Regime transition analysis\ntransitions = analyze_regime_transitions(strategies, regimes)\nplot_regime_transitions(transitions)`
                    }
                ]
            },
            
            config_analysis: {
                title: 'Config-Generated Analysis Notebook',
                cells: [
                    {
                        type: 'markdown',
                        content: '# Analysis from Configuration File\n\nThis notebook was automatically generated from an ADMF config file. The system parsed the config, identified strategy parameters, and created corresponding analysis cells.'
                    },
                    {
                        type: 'code',
                        content: `import admf\nfrom analysis_lib import *\nimport yaml\n\n# Load and parse config file\nconfig_path = input("Enter path to ADMF config file: ")\nwith open(config_path, 'r') as f:\n    config = yaml.safe_load(f)\n\nprint(f"Config: {config['name']}")\nprint(f"Symbols: {config['symbols']}")\nprint(f"Timeframe: {config['timeframe']}")\nprint(f"Strategy type: {list(config['strategy'].keys())[0]}")`
                    },
                    {
                        type: 'code',
                        content: `# Load signals generated from this config\n# The backend automatically generates signals for any missing parameter combinations\nconfig_hash = admf.compute_config_hash(config)\nsignals = admf.load_signals_by_config_hash(config_hash)\n\nif len(signals) == 0:\n    print("No signals found. Running config to generate signals...")\n    # Trigger signal generation\n    signals = admf.run_config(config_path, signal_only=True)\n    \nprint(f"Loaded {len(signals)} signal traces from config")`
                    },
                    {
                        type: 'code',
                        content: `# Analyze parameter sweep results (if config has parameter ranges)\nif any(isinstance(v, list) for strategy in config['strategy'].values() for v in strategy.values()):\n    print("Parameter sweep detected. Analyzing sensitivity...")\n    \n    # Extract parameter combinations\n    param_combos = admf.extract_parameter_combinations(config)\n    print(f"Parameter combinations: {len(param_combos)}")\n    \n    # Performance heatmap for 2D sweeps\n    if len(param_combos.columns) == 2:\n        fig = parameter_heatmap(\n            signals, \n            x_param=param_combos.columns[0],\n            y_param=param_combos.columns[1],\n            metric='sharpe_ratio'\n        )\n        fig.show()\nelse:\n    print("Single parameter set detected. Running basic performance analysis...")`
                    },
                    {
                        type: 'code',
                        content: `# Standard performance analysis\nmetrics = performance_table(signals)\nprint("\nPerformance Summary:")\nprint(metrics.describe())\n\n# Best performing configuration\nbest_config = metrics.loc[metrics['sharpe_ratio'].idxmax()]\nprint(f"\nBest performing config:")\nprint(f"Sharpe: {best_config['sharpe_ratio']:.2f}")\nprint(f"Max DD: {best_config['max_drawdown']:.1%}")\nprint(f"Parameters: {best_config['parameters']}")`
                    },
                    {
                        type: 'code',
                        content: `# Generate execution analysis if executions exist\nexecutions = admf.load_executions_by_config_hash(config_hash)\n\nif len(executions) > 0:\n    print(f"Found {len(executions)} execution traces")\n    \n    # Trade analysis\n    trades = extract_trades(signals, executions)\n    trade_stats = analyze_trades(trades)\n    \n    print(f"Total trades: {len(trades)}")\n    print(f"Win rate: {trade_stats['win_rate']:.1%}")\n    print(f"Profit factor: {trade_stats['profit_factor']:.2f}")\n    \n    # Plot equity curve\n    fig = plot_equity_curves(signals, executions=executions)\n    fig.show()\nelse:\n    print("No execution traces found. This is signal-only analysis.")`
                    },
                    {
                        type: 'markdown',
                        content: '## Config-to-Production Workflow\n\nOnce you are satisfied with the analysis results:\n\n1. **Save best parameters** to production config\n2. **Create deployment notebook** from production template\n3. **Set up monitoring** for live performance tracking\n\nThis config-driven workflow ensures seamless transition from research to production.'
                    }
                ]
            }
        };
        
        // Initialize Monaco for research page
        function initMonaco() {
            require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs' }});
            require(['vs/editor/editor.main'], function() {
                monacoLoaded = true;
                
                // Register ADMF custom language features
                monaco.languages.registerCompletionItemProvider('python', {
                    provideCompletionItems: (model, position) => {
                        const suggestions = [
                            {
                                label: 'admf.load_signals',
                                kind: monaco.languages.CompletionItemKind.Function,
                                insertText: 'admf.load_signals(${1:strategy_type}, ${2:min_sharpe=1.0})',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                documentation: 'Load strategy signals from registry'
                            },
                            {
                                label: 'performance_table',
                                kind: monaco.languages.CompletionItemKind.Function,
                                insertText: 'performance_table(${1:signals})',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                documentation: 'Generate performance metrics table'
                            },
                            {
                                label: 'plot_equity_curves',
                                kind: monaco.languages.CompletionItemKind.Function,
                                insertText: 'plot_equity_curves(${1:signals}, benchmark="${2:SPY}")',
                                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                                documentation: 'Plot strategy equity curves'
                            }
                        ];
                        return { suggestions };
                    }
                });
                
                // Initialize existing code cells with Monaco
                initializeExistingCells();
                
                console.log('Monaco loaded for research page');
            });
        }
        
        // Initialize existing cells with Monaco
        function initializeExistingCells() {
            document.querySelectorAll('.code-cell').forEach(cell => {
                const textarea = cell.querySelector('.code-textarea');
                if (textarea && !cell.querySelector('.monaco-cell-editor')) {
                    createCompactMonacoForCell(cell, textarea.value);
                }
            });
        }
        
        // Create compact Monaco editor for a cell
        function createCompactMonacoForCell(cell, initialValue = '') {
            const cellId = cell.id;
            const codeInput = cell.querySelector('.code-input');
            const textarea = cell.querySelector('.code-textarea');
            
            // Hide textarea
            if (textarea) {
                textarea.style.display = 'none';
            }
            
            // Create Monaco container
            const monacoContainer = document.createElement('div');
            monacoContainer.className = 'monaco-cell-editor';
            monacoContainer.id = `monaco-${cellId}`;
            
            codeInput.appendChild(monacoContainer);
            
            // Calculate optimal height based on content
            const lineCount = (initialValue.match(/\n/g) || []).length + 1;
            const minHeight = Math.max(60, Math.min(200, lineCount * 19 + 10));
            monacoContainer.style.height = `${minHeight}px`;
            
            // Create Monaco editor with minimal UI
            const theme = document.documentElement.getAttribute('data-theme') === 'dark' ? 'vs-dark' : 'vs';
            const editor = monaco.editor.create(monacoContainer, {
                value: initialValue,
                language: 'python',
                theme: theme,
                automaticLayout: true,
                minimap: { enabled: false },
                fontSize: 13,
                fontFamily: "'IBM Plex Mono', 'SF Mono', Monaco, Consolas, monospace",
                lineNumbers: 'off',
                glyphMargin: false,
                folding: false,
                lineDecorationsWidth: 0,
                lineNumbersMinChars: 0,
                renderLineHighlight: 'none',
                scrollBeyondLastLine: false,
                wordWrap: 'on',
                contextmenu: false,
                quickSuggestions: true,
                suggestOnTriggerCharacters: true,
                parameterHints: { enabled: true },
                hover: { enabled: true },
                bracketPairColorization: { enabled: true },
                scrollbar: {
                    vertical: 'hidden',
                    horizontal: 'hidden',
                    alwaysConsumeMouseWheel: false
                },
                overviewRulerLanes: 0,
                hideCursorInOverviewRuler: true,
                overviewRulerBorder: false
            });
            
            // Store editor reference
            monacoEditors.set(cellId, editor);
            
            // Auto-resize based on content
            editor.onDidChangeModelContent(() => {
                const model = editor.getModel();
                if (model) {
                    const lineCount = model.getLineCount();
                    const newHeight = Math.max(60, Math.min(300, lineCount * 19 + 10));
                    monacoContainer.style.height = `${newHeight}px`;
                    editor.layout();
                    
                    // Update textarea for compatibility
                    if (textarea) {
                        textarea.value = editor.getValue();
                    }
                }
            });
            
            // Initial layout
            setTimeout(() => editor.layout(), 100);
            
            return editor;
        }
        
        // Load NT tutorials from backend
        async function loadNTTutorials() {
            try {
                const response = await fetch('http://localhost:5001/api/nautilus/tutorials');
                const data = await response.json();
                
                if (data.tutorials) {
                    // Clear notebooks list
                    const notebooksList = document.getElementById('notebooksList');
                    notebooksList.innerHTML = '';
                    
                    // Add NT tutorials to the list
                    data.tutorials.forEach(tutorial => {
                        const notebookItem = document.createElement('div');
                        notebookItem.className = 'snippet-item';
                        notebookItem.onclick = () => loadNTNotebook(tutorial.path);
                        notebookItem.innerHTML = `
                            <div class="snippet-header">
                                <h3>${tutorial.name.replace(/_/g, ' ').replace('.ipynb', '')}</h3>
                                <button class="btn btn-sm">Open</button>
                            </div>
                            <p class="snippet-description">NautilusTrader Tutorial</p>
                        `;
                        notebooksList.appendChild(notebookItem);
                    });
                }
            } catch (error) {
                console.error('Error loading NT tutorials:', error);
            }
        }
        
        // Helper functions for loading notebooks
        function resetNotebook() {
            // Clear all cells except the first one
            const cells = document.querySelectorAll('.cell');
            cells.forEach((cell, index) => {
                if (index > 0) {
                    cell.remove();
                }
            });
            
            // Clear the first cell
            const firstTextarea = document.querySelector('.code-textarea');
            if (firstTextarea) {
                firstTextarea.value = '';
            }
        }
        
        function addCodeCell(content = '') {
            addCell();
            const cells = document.querySelectorAll('.cell');
            const lastCell = cells[cells.length - 1];
            const textarea = lastCell.querySelector('.code-textarea');
            if (textarea) {
                textarea.value = content;
            }
        }
        
        function addMarkdownCell(content = '') {
            addCell();
            const cells = document.querySelectorAll('.cell');
            const lastCell = cells[cells.length - 1];
            
            // Convert to markdown cell
            const cellType = lastCell.querySelector('.cell-type');
            if (cellType) {
                cellType.textContent = 'md';
                lastCell.classList.add('markdown-cell');
            }
            
            const textarea = lastCell.querySelector('.code-textarea');
            if (textarea) {
                textarea.value = content;
                // Render markdown
                const output = lastCell.querySelector('.cell-output');
                if (output) {
                    output.innerHTML = marked.parse(content);
                    output.style.display = 'block';
                }
            }
        }
        
        // Load specific NT notebook
        async function loadNTNotebook(path) {
            addOutput(`Loading tutorial: ${path}`, 'info');
            
            try {
                const response = await fetch(`http://localhost:5001/api/nautilus/notebook/${encodeURIComponent(path)}`);
                const data = await response.json();
                
                if (data.cells) {
                    // Clear existing cells and load notebook
                    resetNotebook();
                    
                    // Add cells from the notebook
                    data.cells.forEach(cell => {
                        if (cell.cell_type === 'code') {
                            const source = Array.isArray(cell.source) ? cell.source.join('') : cell.source;
                            addCodeCell(source);
                        } else if (cell.cell_type === 'markdown') {
                            const source = Array.isArray(cell.source) ? cell.source.join('') : cell.source;
                            addMarkdownCell(source);
                        }
                    });
                    
                    addOutput(`Loaded tutorial: ${path.split('/').pop()}`, 'success');
                } else {
                    addOutput('Error: Invalid notebook format', 'error');
                }
            } catch (error) {
                addOutput(`Error loading notebook: ${error.message}`, 'error');
            }
        }
        
        // Initialize
        function init() {
            console.log('Initializing research page...');
            
            // Add mobile menu button
            addMobileMenuButton();
            
            // Set active cell
            activeCell = document.getElementById('cell-1');
            
            // Initialize Monaco
            initMonaco();
            
            // Load NT tutorials
            loadNTTutorials();
            
            // Check if notebook was passed from index.html
            const openWithNotebook = sessionStorage.getItem('openWithNotebook');
            const notebookTitle = sessionStorage.getItem('notebookTitle');
            const notebookType = sessionStorage.getItem('notebookType');
            
            if (openWithNotebook === 'true' && notebookType === 'options-flow') {
                console.log('Opening notebook from index.html:', notebookTitle);
                
                // Switch to notebooks tab
                const notebooksTabBtn = document.querySelector('[onclick*="notebooks"]');
                if (notebooksTabBtn) {
                    switchTab('notebooks', notebooksTabBtn);
                }
                
                // Load the Options Flow Scanner notebook
                loadOptionsFlowNotebook();
                
                // Clear sessionStorage
                sessionStorage.removeItem('openWithNotebook');
                sessionStorage.removeItem('notebookTitle');
                sessionStorage.removeItem('notebookType');
            }
            
            // Verify tab content exists
            const tabs = ['snippetsTab', 'templatesTab', 'notebooksTab'];
            tabs.forEach(tabId => {
                const tab = document.getElementById(tabId);
                if (tab) {
                    console.log('Found tab:', tabId);
                } else {
                    console.error('Missing tab:', tabId);
                }
            });
            
            // Test that functions are defined
            if (typeof switchTab === 'function') {
                console.log('switchTab function is defined');
            } else {
                console.error('switchTab function is NOT defined');
            }
            
            if (typeof toggleCategory === 'function') {
                console.log('toggleCategory function is defined');
            } else {
                console.error('toggleCategory function is NOT defined');
            }
            
            console.log('Research page initialized');
        }
        
        // Add mobile menu button
        function addMobileMenuButton() {
            if (window.innerWidth <= 768) {
                const header = document.querySelector('.header-content');
                if (header && !document.getElementById('sidebar-toggle')) {
                    const toggleBtn = document.createElement('button');
                    toggleBtn.id = 'sidebar-toggle';
                    toggleBtn.className = 'btn btn-ghost btn-sm';
                    toggleBtn.textContent = 'Research';
                    toggleBtn.onclick = toggleSidebar;
                    
                    const nav = header.querySelector('.nav-actions');
                    if (nav) {
                        nav.insertBefore(toggleBtn, nav.firstChild);
                    }
                }
            }
        }
        
        // Toggle sidebar (mobile only)
        function toggleSidebar() {
            const sidebar = document.getElementById('snippetsSidebar');
            sidebar.classList.toggle('open');
        }
        
        // Switch between sidebar tabs
        function switchTab(tabName, element) {
            try {
                console.log('Switching to tab:', tabName);
                
                // Update tab buttons
                document.querySelectorAll('.sidebar-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                element.classList.add('active');
                
                // Update tab content
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                
                const targetTab = document.getElementById(tabName + 'Tab');
                if (targetTab) {
                    targetTab.classList.add('active');
                    console.log('Tab switched successfully to:', tabName);
                } else {
                    console.error('Tab not found:', tabName + 'Tab');
                }
            } catch (error) {
                console.error('Error switching tab:', error);
            }
        }
        
        // Toggle category collapse
        function toggleCategory(header) {
            try {
                header.classList.toggle('collapsed');
                console.log('Toggled category:', header.querySelector('span:nth-child(2)').textContent);
                console.log('Is collapsed:', header.classList.contains('collapsed'));
            } catch (error) {
                console.error('Error toggling category:', error);
            }
        }
        
        // Filter content (snippets or templates)
        function filterContent(event) {
            const searchTerm = event.target.value.toLowerCase();
            const activeTab = document.querySelector('.tab-content.active');
            
            if (activeTab.id === 'snippetsTab') {
                const items = activeTab.querySelectorAll('.snippet-item');
                items.forEach(item => {
                    const name = item.querySelector('.snippet-name').textContent.toLowerCase();
                    const shortcut = item.querySelector('.snippet-shortcut')?.textContent.toLowerCase() || '';
                    const visible = name.includes(searchTerm) || shortcut.includes(searchTerm);
                    item.style.display = visible ? 'flex' : 'none';
                });
            } else {
                const items = activeTab.querySelectorAll('.template-item');
                items.forEach(item => {
                    const name = item.querySelector('.template-name').textContent.toLowerCase();
                    const desc = item.querySelector('.template-desc').textContent.toLowerCase();
                    const visible = name.includes(searchTerm) || desc.includes(searchTerm);
                    item.style.display = visible ? 'flex' : 'none';
                });
            }
        }
        
        // Insert snippet
        function insertSnippet(snippetName) {
            if (!activeCell) return;
            
            const textarea = activeCell.querySelector('.code-textarea');
            if (!textarea) return;
            
            const snippet = snippets[snippetName];
            if (!snippet) return;
            
            // Insert at cursor position
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const text = textarea.value;
            
            textarea.value = text.substring(0, start) + snippet + text.substring(end);
            textarea.selectionStart = textarea.selectionEnd = start + snippet.length;
            textarea.focus();
            
            // Close sidebar on mobile
            if (window.innerWidth <= 768) {
                toggleSidebar();
            }
        }
        
        // Handle keyboard shortcuts
        function handleKeyDown(event, textarea) {
            const cell = textarea.closest('.cell');
            
            // Tab for autocomplete
            if (event.key === 'Tab') {
                event.preventDefault();
                showAutocomplete(textarea);
            }
            
            // Ctrl/Cmd + Enter to run cell
            if ((event.ctrlKey || event.metaKey) && event.key === 'Enter') {
                event.preventDefault();
                runCell(cell.querySelector('.cell-btn'));
            }
            
            // Shift + Enter to run and advance
            if (event.shiftKey && event.key === 'Enter') {
                event.preventDefault();
                runCell(cell.querySelector('.cell-btn'));
                // Focus next cell or create new one
                const nextCell = cell.nextElementSibling;
                if (nextCell && nextCell.classList.contains('cell')) {
                    selectCell(nextCell);
                } else {
                    addCell();
                }
            }
        }
        
        // Handle input for autocomplete
        function handleInput(event, textarea) {
            const cell = textarea.closest('.cell');
            const popup = cell.querySelector('.autocomplete-popup');
            
            // Simple autocomplete trigger on '.'
            if (textarea.value.endsWith('.')) {
                showAutocomplete(textarea);
            } else {
                popup.classList.remove('show');
            }
        }
        
        // Show autocomplete
        function showAutocomplete(textarea) {
            const cell = textarea.closest('.cell');
            const popup = cell.querySelector('.autocomplete-popup');
            
            // Clear and populate suggestions
            popup.innerHTML = '';
            autocompleteSuggestions.forEach(suggestion => {
                const item = document.createElement('div');
                item.className = 'autocomplete-item';
                item.innerHTML = `
                    <span class="autocomplete-name">${suggestion.name}</span>
                    <span class="autocomplete-type">${suggestion.type}</span>
                `;
                item.onclick = () => {
                    insertAutocomplete(textarea, suggestion.name);
                    popup.classList.remove('show');
                };
                popup.appendChild(item);
            });
            
            // Position and show
            const rect = textarea.getBoundingClientRect();
            const cellRect = cell.getBoundingClientRect();
            popup.style.top = (rect.bottom - cellRect.top) + 'px';
            popup.style.left = '20px';
            popup.classList.add('show');
        }
        
        // Insert autocomplete suggestion
        function insertAutocomplete(textarea, suggestion) {
            const text = textarea.value;
            const lastDot = text.lastIndexOf('.');
            
            if (lastDot !== -1) {
                // Replace after the dot
                textarea.value = text.substring(0, lastDot + 1) + suggestion.split('.').pop();
            } else {
                // Just append
                textarea.value = text + suggestion;
            }
            
            textarea.focus();
        }
        
        // Select cell
        function selectCell(cell) {
            // Remove active from all cells
            document.querySelectorAll('.cell').forEach(c => c.classList.remove('active'));
            
            // Set active
            cell.classList.add('active');
            activeCell = cell;
            
            // Focus textarea if code cell
            const textarea = cell.querySelector('.code-textarea');
            if (textarea) {
                textarea.focus();
            }
        }
        
        // Run cell
        function runCell(btn) {
            const cell = btn.closest('.cell');
            
            if (cell.classList.contains('code-cell')) {
                const textarea = cell.querySelector('.code-textarea');
                const code = textarea.value;
                
                // Check if output div exists
                let output = cell.querySelector('.code-output');
                if (!output) {
                    output = document.createElement('div');
                    output.className = 'code-output';
                    cell.appendChild(output);
                }
                
                // Simulate execution based on content
                if (code.includes('plot_equity_curves') || (code.includes('plot') && code.includes('fig.show()'))) {
                    // Keep existing visual output if present
                    if (!output.querySelector('.output-plot')) {
                        output.innerHTML = '<div class="output-plot">[Interactive chart would render here]</div>';
                    }
                } else if (code.includes('plt.scatter') || code.includes('Risk-return')) {
                    // Keep existing visual output if present  
                    if (!output.querySelector('.output-plot')) {
                        output.innerHTML = '<div class="output-plot">[Scatter plot would render here]</div>';
                    }
                } else if (code.includes('performance_table') && code.includes('.head()')) {
                    // Keep existing table output if present
                    if (!output.querySelector('.output-table')) {
                        output.innerHTML = `<pre>   strategy_hash  sharpe  max_dd  win_rate  total_return
0  sig_a7f8d9e6    2.34   -8.2%     68%       +34.5%
1  sig_b8g9e0f7    2.12   -9.4%     64%       +28.3%
2  sig_c9h0f1g8    1.87  -11.2%     59%       +22.1%</pre>`;
                    }
                } else if (code.includes('print')) {
                    // Extract print statements
                    const printMatch = code.match(/print\(.*?\)/g);
                    if (printMatch) {
                        output.textContent = 'Executing...\n' + printMatch.join('\n').replace(/print\(["']?|["']?\)/g, '');
                    }
                } else {
                    output.textContent = 'Cell executed successfully';
                }
            }
        }
        
        // Delete cell
        function deleteCell(btn) {
            if (confirm('Delete this cell?')) {
                btn.closest('.cell').remove();
            }
        }
        
        // Add cell
        function addCell() {
            const type = document.getElementById('cellTypeSelect').value;
            const container = document.getElementById('notebookContent');
            const addCellBtn = container.querySelector('.add-cell');
            
            const newCell = document.createElement('div');
            const cellId = `cell-${cellCounter++}`;
            newCell.className = `cell ${type}-cell`;
            newCell.id = cellId;
            newCell.onclick = function(e) { 
                if (e.target === this || e.target.classList.contains('code-input')) {
                    selectCell(this); 
                }
            };
            
            if (type === 'code') {
                newCell.innerHTML = `
                    <div class="cell-toolbar">
                        <button class="cell-btn" onclick="runCell(this)">▶</button>
                        <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                    </div>
                    <div class="code-input">
                        <div class="code-editor">
                            <textarea class="code-textarea" onkeydown="handleKeyDown(event, this)" oninput="handleInput(event, this)" style="display: none;"># Type code here</textarea>
                        </div>
                        <div class="autocomplete-popup" id="autocomplete-${cellCounter}"></div>
                    </div>
                `;
                
                // Add to DOM first
                container.insertBefore(newCell, addCellBtn);
                
                // Create compact Monaco editor for the new cell if Monaco is loaded
                if (monacoLoaded) {
                    setTimeout(() => {
                        createCompactMonacoForCell(newCell, '# Type code here');
                    }, 100);
                }
            } else {
                newCell.innerHTML = `
                    <div class="cell-toolbar">
                        <button class="cell-btn" onclick="runCell(this)">▶</button>
                        <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                    </div>
                    <div class="markdown-preview">
                        <p>New markdown cell</p>
                    </div>
                `;
            }
            
            if (type !== 'code') {
                container.insertBefore(newCell, addCellBtn);
            }
            selectCell(newCell);
        }
        
        // Run all cells
        function runAllCells() {
            document.querySelectorAll('.cell').forEach(cell => {
                const runBtn = cell.querySelector('.cell-btn');
                if (runBtn) {
                    runCell(runBtn);
                }
            });
        }
        
        // Clear outputs
        function clearOutputs() {
            document.querySelectorAll('.code-output').forEach(output => {
                output.remove();
            });
        }
        
        // Export notebook
        function exportNotebook() {
            alert('Notebook exported to strategy_analysis.ipynb');
        }
        
        // Save notebook
        function saveNotebook() {
            const saveBtn = event.target;
            saveBtn.textContent = 'Saving...';
            setTimeout(() => {
                saveBtn.textContent = 'Saved';
                setTimeout(() => {
                    saveBtn.textContent = 'Save';
                }, 2000);
            }, 500);
        }
        
        // Load notebook template
        function loadTemplate(templateName, customTemplate = null) {
            const template = customTemplate || notebookTemplates[templateName];
            if (!template) return;
            
            // Confirm if notebook has content
            const existingCells = document.querySelectorAll('.cell');
            if (existingCells.length > 0) {
                if (!confirm('This will replace the current notebook. Continue?')) {
                    return;
                }
            }
            
            // Update title
            document.querySelector('.notebook-title-input').value = template.title;
            
            // Clear existing content
            const container = document.getElementById('notebookContent');
            container.innerHTML = '';
            
            // Add template cells
            template.cells.forEach((cellData, index) => {
                const cellId = `cell-${index + 1}`;
                const newCell = document.createElement('div');
                newCell.className = `cell ${cellData.type}-cell`;
                newCell.id = cellId;
                newCell.onclick = function(e) { 
                    if (e.target === this || e.target.classList.contains('code-input')) {
                        selectCell(this); 
                    }
                };
                
                if (cellData.type === 'code') {
                    newCell.innerHTML = `
                        <div class="cell-toolbar">
                            <button class="cell-btn" onclick="runCell(this)">▶</button>
                            <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                        </div>
                        <div class="code-input">
                            <div class="code-editor">
                                <textarea class="code-textarea" onkeydown="handleKeyDown(event, this)" oninput="handleInput(event, this)">${cellData.content}</textarea>
                            </div>
                            <div class="autocomplete-popup" id="autocomplete-${index + 1}"></div>
                        </div>
                    `;
                } else {
                    newCell.innerHTML = `
                        <div class="cell-toolbar">
                            <button class="cell-btn" onclick="runCell(this)">▶</button>
                            <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                        </div>
                        <div class="markdown-preview">
                            ${marked.parse(cellData.content)}
                        </div>
                    `;
                }
                
                container.appendChild(newCell);
            });
            
            // Add the "Add Cell" button
            const addCellBtn = document.createElement('div');
            addCellBtn.className = 'add-cell';
            addCellBtn.onclick = addCell;
            addCellBtn.innerHTML = `
                <span>+ Add Cell</span>
                <select id="cellTypeSelect" class="form-input" style="width: auto; padding: var(--space-1) var(--space-2); font-size: var(--font-size-sm);">
                    <option value="code">Code</option>
                    <option value="markdown">Markdown</option>
                </select>
            `;
            container.appendChild(addCellBtn);
            
            // Update cell counter
            cellCounter = template.cells.length + 1;
            
            // Select first cell
            const firstCell = container.querySelector('.cell');
            if (firstCell) {
                selectCell(firstCell);
            }
            
            // Close sidebar on mobile
            if (window.innerWidth <= 768) {
                const sidebar = document.getElementById('snippetsSidebar');
                sidebar.classList.remove('open');
            }
        }
        
        // Generate notebook from config
        function generateFromConfig() {
            const configPath = prompt('Enter path to ADMF config file:', 'configs/my_strategy.yaml');
            if (configPath) {
                // Load the config analysis template
                loadTemplate('config_analysis');
                
                // Update title with config name
                const configName = configPath.split('/').pop().replace('.yaml', '').replace('.yml', '');
                document.querySelector('.notebook-title-input').value = `Analysis: ${configName}`;
                
                // Auto-fill the first code cell with the config path
                const firstCodeCell = document.querySelector('.code-cell .code-textarea');
                if (firstCodeCell) {
                    firstCodeCell.value = firstCodeCell.value.replace(
                        'config_path = input("Enter path to ADMF config file: ")',
                        `config_path = "${configPath}"`
                    );
                }
                
                // Close sidebar on mobile
                if (window.innerWidth <= 768) {
                    const sidebar = document.getElementById('snippetsSidebar');
                    sidebar.classList.remove('open');
                }
            }
        }
        
        // Load Options Flow Scanner notebook
        function loadOptionsFlowNotebook() {
            // Clear existing content without confirmation
            const container = document.getElementById('notebookContent');
            container.innerHTML = '';
            
            // Set title
            document.querySelector('.notebook-title-input').value = 'Options Flow Scanner';
            
            const notebookContent = {
                title: 'Options Flow Scanner',
                cells: [
                    {
                        type: 'markdown',
                        content: '# Options Flow Scanner\n\nReal-time scanner for unusual options activity and large block trades.'
                    },
                    {
                        type: 'code',
                        content: `import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Configuration for options flow scanner
FLOW_THRESHOLD = 1000000  # $1M minimum
VOLUME_RATIO = 5.0       # 5x average volume
IV_PERCENTILE = 90       # High IV percentile`
                    },
                    {
                        type: 'code',
                        content: `# Scan for unusual options activity
def scan_options_flow(symbol_list):
    orders = []
    
    for symbol in symbol_list:
        options = get_options_chain(symbol)
        
        for option in options:
            if (option.volume > option.avg_volume * VOLUME_RATIO and
                option.premium * option.volume > FLOW_THRESHOLD):
                
                orders.append({
                    'symbol': symbol,
                    'strike': option.strike,
                    'expiry': option.expiry,
                    'type': option.type,
                    'volume': option.volume,
                    'premium': option.premium,
                    'flow': option.premium * option.volume
                })
    
    return pd.DataFrame(orders).sort_values('flow', ascending=False)`
                    },
                    {
                        type: 'code',
                        content: `# Run the scanner
top_symbols = ['SPY', 'QQQ', 'AAPL', 'TSLA', 'NVDA', 'AMD', 'MSFT', 'AMZN', 'META', 'GOOGL']
unusual_flows = scan_options_flow(top_symbols)
print(f"Found {len(unusual_flows)} unusual options flows")`,
                        output: `Found 47 unusual options flows

Top 5 flows:
TSLA 300C 12/15 - Volume: 25,432 - Flow: $12.7M
NVDA 500C 01/19 - Volume: 18,221 - Flow: $9.1M  
SPY 430P 12/08 - Volume: 45,123 - Flow: $8.9M
AAPL 185C 12/15 - Volume: 22,145 - Flow: $6.6M
QQQ 380C 12/22 - Volume: 15,432 - Flow: $5.4M`
                    },
                    {
                        type: 'markdown',
                        content: '## Flow Analysis\n\nThe scanner identified significant bullish activity in tech names, particularly TSLA and NVDA with large call volumes. SPY puts suggest hedging activity.'
                    },
                    {
                        type: 'code',
                        content: `# Visualize options flow by sector
import matplotlib.pyplot as plt

sector_flows = unusual_flows.groupby('sector')['flow'].sum()
plt.figure(figsize=(10, 6))
sector_flows.plot(kind='bar', color='#4ec9b0')
plt.title('Options Flow by Sector')
plt.ylabel('Total Flow ($M)')
plt.xlabel('Sector')
plt.xticks(rotation=45)
plt.show()`,
                        output: '[Bar chart showing Technology sector with highest flow at $45M, followed by Consumer Discretionary at $23M]'
                    }
                ]
            };
            
            // Add cells directly
            let cellCounter = 1;
            notebookContent.cells.forEach((cellData) => {
                const cellId = `cell-${cellCounter++}`;
                const cellElement = createCellElement(cellData.type, cellId, cellData.content);
                container.appendChild(cellElement);
                
                // Add output if exists
                if (cellData.output) {
                    const outputDiv = document.createElement('div');
                    outputDiv.className = 'code-output';
                    outputDiv.innerHTML = `<pre>${cellData.output}</pre>`;
                    cellElement.appendChild(outputDiv);
                }
                
                // Initialize Monaco for code cells
                if (cellData.type === 'code' && monacoLoaded) {
                    setTimeout(() => initMonacoForCell(cellId, cellData.content), 100);
                }
            });
            
            // Add the "Add Cell" button
            const addCellBtn = document.createElement('div');
            addCellBtn.className = 'add-cell';
            addCellBtn.onclick = addCell;
            addCellBtn.innerHTML = '<span>+</span> Add Cell';
            container.appendChild(addCellBtn);
        }
        
        // Helper function to create cell element
        function createCellElement(type, cellId, content = '') {
            const cellElement = document.createElement('div');
            cellElement.className = `cell ${type}-cell`;
            cellElement.id = cellId;
            cellElement.onclick = function(e) { 
                if (e.target === this || e.target.classList.contains('code-input')) {
                    selectCell(this); 
                }
            };
            
            if (type === 'markdown') {
                cellElement.innerHTML = `
                    <div class="cell-toolbar">
                        <button class="cell-btn" onclick="runCell(this)">▶</button>
                        <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                    </div>
                    <div class="markdown-content">${marked.parse(content)}</div>
                    <textarea class="markdown-input" style="display: none;">${content}</textarea>
                `;
            } else if (type === 'code') {
                cellElement.innerHTML = `
                    <div class="cell-toolbar">
                        <button class="cell-btn" onclick="runCell(this)">▶</button>
                        <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                    </div>
                    <div class="code-input">
                        <div class="line-numbers"></div>
                        <div class="monaco-cell-container" id="monaco-${cellId}"></div>
                        <textarea class="code-textarea" style="display: none;">${content}</textarea>
                    </div>
                `;
            }
            
            return cellElement;
        }
        
        // Create new notebook
        function createNewNotebook() {
            const title = prompt('Enter notebook name:', 'Untitled Notebook');
            if (title) {
                // Clear current notebook
                const container = document.getElementById('notebookContent');
                container.innerHTML = '';
                
                // Set title
                document.querySelector('.notebook-title-input').value = title;
                
                // Add initial markdown cell
                const initialCell = document.createElement('div');
                initialCell.className = 'cell markdown-cell';
                initialCell.id = 'cell-1';
                initialCell.onclick = function(e) { 
                    if (e.target === this || e.target.classList.contains('code-input')) {
                        selectCell(this); 
                    }
                };
                initialCell.innerHTML = `
                    <div class="cell-toolbar">
                        <button class="cell-btn" onclick="runCell(this)">▶</button>
                        <button class="cell-btn" onclick="deleteCell(this)">✕</button>
                    </div>
                    <div class="markdown-preview">
                        <h1>${title}</h1>
                        <p>New analysis notebook. Click + Add Cell to get started.</p>
                    </div>
                `;
                
                container.appendChild(initialCell);
                
                // Add the "Add Cell" button
                const addCellBtn = document.createElement('div');
                addCellBtn.className = 'add-cell';
                addCellBtn.onclick = addCell;
                addCellBtn.innerHTML = `
                    <span>+ Add Cell</span>
                    <select id="cellTypeSelect" class="form-input" style="width: auto; padding: var(--space-1) var(--space-2); font-size: var(--font-size-sm);">
                        <option value="code">Code</option>
                        <option value="markdown">Markdown</option>
                    </select>
                `;
                container.appendChild(addCellBtn);
                
                cellCounter = 2;
                selectCell(initialCell);
                
                // Close sidebar on mobile
                if (window.innerWidth <= 768) {
                    const sidebar = document.getElementById('snippetsSidebar');
                    sidebar.classList.remove('open');
                }
            }
        }
        
        // Load existing notebook
        function loadNotebook(notebookId) {
            // Simulate loading a saved notebook
            // Notebooks - will be loaded from NT tutorials
            const notebooks = {
                'nt_loading': {
                    title: 'Loading NautilusTrader Tutorials...',
                    cells: [
                        {
                            type: 'markdown',
                            content: '# Loading NautilusTrader Tutorial Notebooks\n\nFetching tutorial notebooks from the backend...'
                        }
                    ]
                },
                'parameter_sweep_bb': {
                    title: 'Bollinger Bands Parameter Sweep',
                    cells: [
                        {
                            type: 'markdown',
                            content: '# Bollinger Bands Parameter Optimization\n\nSystematic analysis of period and standard deviation parameters.'
                        },
                        {
                            type: 'code',
                            content: `# Load Bollinger Bands sweep results\nsweep_results = admf.load_signals(strategy_type='bollinger_bands')\nprint(f"Parameter combinations tested: {len(sweep_results)}")`
                        }
                    ]
                }
            };
            
            const notebook = notebooks[notebookId];
            if (notebook) {
                loadTemplate('custom', notebook);
            }
            
            // Close sidebar on mobile
            if (window.innerWidth <= 768) {
                const sidebar = document.getElementById('snippetsSidebar');
                sidebar.classList.remove('open');
            }
        }
        
        // Toggle strategy folder
        function toggleFolder(folder) {
            // Placeholder for folder expansion
            console.log('Toggle folder:', folder.textContent);
        }
        
        // Handle window resize
        window.addEventListener('resize', () => {
            addMobileMenuButton();
        });
        
        // Initialize on load
        window.addEventListener('load', init);
        
        // Click outside to close autocomplete
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.autocomplete-popup') && !e.target.closest('.code-textarea')) {
                document.querySelectorAll('.autocomplete-popup').forEach(popup => {
                    popup.classList.remove('show');
                });
            }
        });
    </script>
</body>
</html>